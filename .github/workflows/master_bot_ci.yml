name: Master Branch Procharity Bot

on:
  pull_request:
    branches:
      - master
    types: [closed]
  push:
    branches:
      - master

  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  ORGANIZATION: procharity
  IMAGE_NAME_BACK: procharity_back
  IMAGE_NAME_FRONT: procharity_front_prod


jobs:
  build_and_push_to_ghcr:
    name: Push Docker image to Github Container Registry
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Copy docker-compose to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ${{ secrets.USER_DEV }}
          key: ${{ secrets.SSH_KEY_PROD }}
          source: 'docker-compose.test.yml'
          target: '/code'
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'
      - name: Push Back to ghcr.io
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ env.OWNER_LC }}/procharity_bot_back
      - name: Push Front to ghcr.io
        uses: docker/build-push-action@v2
        with:
          context: ./front
          file: ./front/Dockerfile_prod
          push: true
          tags: ghcr.io/${{ env.OWNER_LC }}/procharity_bot_front_prod

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_ghcr
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ${{ secrets.USER_DEV }}
          key: ${{ secrets.SSH_KEY_PROD }}
          script: |
            cd /code
            touch .env

            echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} > .env
            echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB_PROD }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_PROD }} >> .env
            echo DATABASE_URL=${{ secrets.DATABASE_URL_PROD }} >> .env
            echo TOKEN=${{ secrets.TOKEN_PROD }} >> .env
            echo MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD_PROD }} >> .env
            echo MAIL_SERVER=${{ secrets.MAIL_SERVER }} >> .env
            echo MAIL_PORT=${{ secrets.MAIL_PORT }} >> .env
            echo MAIL_USE_TLS=${{ secrets.MAIL_USE_TLS }} >> .env
            echo MAIL_USERNAME=${{ secrets.MAIL_USERNAME }} >> .env
            echo MAIL_DEFAULT_SENDER=${{ secrets.MAIL_DEFAULT_SENDER }} >> .env
            echo EMAIL_PROCHARRITY=${{ secrets.EMAIL_PROCHARRITY }} >> .env
            echo HOST_NAME=${{ secrets.HOST_NAME_PROD }} >> .env
            echo ACCESS_TOKEN_FOR_PROCHARITY=${{ secrets.ACCESS_TOKEN_FOR_PROCHARITY_PROD }} >> .env
            echo DEBUG=${{ secrets.DEBUG }} >> .env
            echo USE_WEBHOOK=${{ secrets.USE_WEBHOOK }} >> .env

            sudo docker-compose -f docker-compose.prod.yml stop
            sudo docker-compose -f docker-compose.prod.yml rm -f
            sudo docker rmi $(sudo docker images -qa)
            sudo docker-compose -f docker-compose.prod.yml up -d --quiet-pull
            sudo docker-compose -f docker-compose.prod.yml exec -d back alembic upgrade head
