import logging
import os
import re

from dotenv import load_dotenv
from telegram import (ReplyKeyboardRemove,
                      Update,
                      InlineKeyboardMarkup,
                      InlineKeyboardButton,
                      ParseMode)
from telegram.ext import (Updater,
                          CommandHandler,
                          ConversationHandler,
                          CallbackContext,
                          CallbackQueryHandler,
                          PicklePersistence)

from bot.states import (GREETING,
                        CATEGORY,
                        AFTER_CATEGORY_REPLY,
                        MENU,
                        OPEN_TASKS,
                        NO_CATEGORY,
                        AFTER_ADD_CATEGORY,
                        AFTER_NEW_QUESTION,
                        AFTER_ADD_FEATURE,
                        TYPING,
                        START_SHOW_TASK,
                        CANCEL_FEEDBACK,
                        SUBSCRIPTION_FLAG,
                        GREETING_REGISTERED_USER,
                        )

from bot.data_to_db import (add_user,
                            change_subscription,
                            get_user_active_tasks,
                            get_category,
                            change_user_category,
                            log_command,
                            cancel_feedback_stat,
                            get_mailing_status,
                            check_user_category,
                            check_user_external_id
                            )
from bot.formatter import display_task
from bot.constants import LOG_COMMANDS_NAME, BOT_NAME, REASONS
from app.config import BOT_PERSISTENCE_FILE

PAGINATION = 3

load_dotenv()

logger = logging.getLogger(__name__)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)

bot_persistence = PicklePersistence(filename=BOT_PERSISTENCE_FILE,
                                    store_bot_data=True,
                                    store_user_data=True,
                                    store_callback_data=True,
                                    store_chat_data=True)

updater = Updater(token=os.getenv('TOKEN'), persistence=bot_persistence, use_context=True)
# updater = Updater(token=os.getenv('TOKEN'), use_context=True)
MENU_BUTTONS = [
    [
        InlineKeyboardButton(
            text='üîé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è', callback_data='open_task'
        )
    ],
    [
        InlineKeyboardButton(
            text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏', callback_data='change_category'
        )
    ],
    [
        InlineKeyboardButton(
            text='‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–æ—à–∏–±–∫—É', callback_data='new_feature'
        )
    ],
    [
        InlineKeyboardButton(
            text='‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data='ask_question'
        )
    ],
    [
        InlineKeyboardButton(
            text='‚ÑπÔ∏è –û –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ', callback_data='about'
        )
    ],
    [
        InlineKeyboardButton(
            text='‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏—è',
            callback_data='stop_subscription'
        )
    ]
]


def get_subscription_button(context: CallbackContext):
    if context.user_data[SUBSCRIPTION_FLAG]:
        return InlineKeyboardButton(
            text='‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏—è',
            callback_data='stop_subscription'
        )
    return InlineKeyboardButton(
        text='‚èπ –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏—è',
        callback_data='start_subscription'
    )


@log_command(command=LOG_COMMANDS_NAME['start'], start_menu=True)
def start(update: Update, context: CallbackContext) -> int:
    deeplink_passed_param = context.args
    add_user(update.message, deeplink_passed_param)
    context.user_data[SUBSCRIPTION_FLAG] = get_mailing_status(update.effective_user.id)

    callback_data = (GREETING_REGISTERED_USER
                     if check_user_category(update.effective_user.id)
                     and check_user_external_id(update.message, deeplink_passed_param)
                     else GREETING)
    button = [
        [
            InlineKeyboardButton(text='–ù–∞—á–Ω–µ–º', callback_data=callback_data)
        ]
    ]
    keyboard = InlineKeyboardMarkup(button)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text='–ü—Ä–∏–≤–µ—Ç! üëã \n\n'
             f'–ú–µ–Ω—è –∑–æ–≤—É—Ç {BOT_NAME}. '
             '–ë—É–¥—É –¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –≤ –∫—É—Ä—Å–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∏ –ø–æ–º–æ–≥—É '
             '–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
        reply_markup=keyboard
    )
    return GREETING


def choose_category_after_start(update: Update, context: CallbackContext):
    update.callback_query.edit_message_text(
        text=update.callback_query.message.text
    )

    return choose_category(update, context, True)


def before_confirm_specializations(update: Update, context: CallbackContext):
    update.callback_query.edit_message_text(
        text=update.callback_query.message.text
    )
    return confirm_specializations(update, context)


@log_command(command=LOG_COMMANDS_NAME['confirm_specializations'])
def confirm_specializations(update: Update, context: CallbackContext):
    buttons = [
        [
            InlineKeyboardButton(text='–î–∞', callback_data='ready')
        ],
        [
            InlineKeyboardButton(text='–ù–µ—Ç, —Ö–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å.', callback_data='return_chose_category')
        ]
    ]
    specializations = ', '.join([spec['name'] for spec
                                 in get_category(update.effective_user.id)
                                 if spec['user_selected']])

    if not specializations:
        specializations = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω—ã'

    keyboard = InlineKeyboardMarkup(buttons)

    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text='–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π:'
             f' *{specializations}*. –í—Å–µ –≤–µ—Ä–Ω–æ?',
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard,
    )
    return CATEGORY


@log_command(command=LOG_COMMANDS_NAME['change_user_categories'])
def change_user_categories(update: Update, context: CallbackContext):
    """Auxiliary function for selecting a category and changing the status of subscriptions."""
    pattern_id = re.findall(r'\d+', update.callback_query.data)
    category_id = int(pattern_id[0])
    telegram_id = update.effective_user.id

    change_user_category(telegram_id=telegram_id, category_id=category_id)
    choose_category(update, context)
    update.callback_query.answer()


@log_command(command=LOG_COMMANDS_NAME['choose_category'],
             ignore_func=['change_user_categories'])
def choose_category(update: Update, context: CallbackContext, save_prev_msg: bool = False):
    """The main function is to select categories for subscribing to them."""
    categories = get_category(update.effective_user.id)

    buttons = []
    for cat in categories:
        if cat['user_selected']:
            cat['name'] += " ‚úÖ"
        buttons.append([InlineKeyboardButton(text=cat['name'], callback_data=f'up_cat{cat["category_id"]}'
                                             )])

    buttons += [
        [
            InlineKeyboardButton(text='–ù–µ—Ç –º–æ–∏—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π üòï',
                                 callback_data='no_relevant')
        ],
        [
            InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ üëå', callback_data='ready'),
        ],
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    if save_prev_msg:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–ß—Ç–æ–±—ã —è –∑–Ω–∞–ª, —Å –∫–∞–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Ç—ã –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å, '
                 '–≤—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å '
                 '–Ω–µ—Å–∫–æ–ª—å–∫–æ). –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –Ω–∞–∂–º–∏ –Ω–∞ –ø—É–Ω–∫—Ç "–ì–æ—Ç–æ–≤–æ üëå"',
            reply_markup=keyboard,
        )
    else:
        update.callback_query.edit_message_text(
            text='–ß—Ç–æ–±—ã —è –∑–Ω–∞–ª, —Å –∫–∞–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Ç—ã –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å, '
                 '–≤—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å '
                 '–Ω–µ—Å–∫–æ–ª—å–∫–æ). –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –Ω–∞–∂–º–∏ –Ω–∞ –ø—É–Ω–∫—Ç "–ì–æ—Ç–æ–≤–æ üëå"',
            reply_markup=keyboard,
        )
    return CATEGORY


@log_command(command=LOG_COMMANDS_NAME['after_category_choose'])
def after_category_choose(update: Update, context: CallbackContext):
    buttons = [
        [
            InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è', callback_data='open_task')
        ],
        [
            InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data='open_menu')
        ]
    ]
    keyboard = InlineKeyboardMarkup(buttons)

    user_categories = ', '.join([spec['name'] for spec
                                 in get_category(update.effective_user.id)
                                 if spec['user_selected']])

    if not user_categories:
        user_categories = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω—ã'

    update.callback_query.edit_message_text(
        text=f'–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö '
             f'–∑–∞–¥–∞–Ω–∏—è—Ö –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: *{user_categories}*.\n\n'
             f'–ê –ø–æ–∫–∞ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è.',
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )
    return AFTER_CATEGORY_REPLY


@log_command(command=LOG_COMMANDS_NAME['open_menu'])
def open_menu(update: Update, context: CallbackContext):
    subscription_button = get_subscription_button(context)
    MENU_BUTTONS[-1] = [subscription_button]
    keyboard = InlineKeyboardMarkup(MENU_BUTTONS)
    text = '–ú–µ–Ω—é'
    update.callback_query.answer()
    update.callback_query.edit_message_text(text=text, reply_markup=keyboard)

    return MENU


def open_menu_fall(update: Update, context: CallbackContext):
    subscription_button = get_subscription_button(context)
    MENU_BUTTONS[-1] = [subscription_button]
    keyboard = InlineKeyboardMarkup(MENU_BUTTONS)
    text = '–ú–µ–Ω—é'
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=keyboard
    )

    return MENU


@log_command(command=LOG_COMMANDS_NAME['show_open_task'])
def show_open_task(update: Update, context: CallbackContext):
    buttons = [
        [
            InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë', callback_data='open_task')
        ],
        [
            InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data='open_menu')
        ]
    ]
    keyboard = InlineKeyboardMarkup(buttons)

    if not context.user_data.get(START_SHOW_TASK):
        context.user_data[START_SHOW_TASK] = []

    tasks = get_user_active_tasks(
        update.effective_user.id, context.user_data[START_SHOW_TASK]
    )
    if tasks:
        tasks.sort(key=lambda x: x[0].id)

    if not tasks:
        update.callback_query.edit_message_text(
            text='–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π',
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data='open_menu')]]
            )
        )
    else:
        for task in tasks[:PAGINATION]:
            """
            –≠—Ç–æ —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ —Å–ø–∏—Å–∫–µ
            –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫ –ø–æ–∫–∞–∑—É –∑–∞–¥–∞–Ω–∏–π –∏–ª–∏ –Ω–µ—Ç.
            """
            if task[0].id != tasks[-1][0].id:
                context.bot.send_message(
                    chat_id=update.effective_chat.id, text=display_task(task),
                    parse_mode=ParseMode.HTML
                )
                context.user_data[START_SHOW_TASK].append(task[0].id)
            else:
                context.bot.send_message(
                    chat_id=update.effective_chat.id, text=display_task(task),
                    parse_mode=ParseMode.HTML
                )
                update.callback_query.delete_message()
                context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text='–¢—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç.',
                    reply_markup=InlineKeyboardMarkup(
                        [[InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é',
                                               callback_data='open_menu')]]
                    )
                )
                return OPEN_TASKS

        update.callback_query.delete_message()

        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–ï—Å—Ç—å –µ—â—ë –∑–∞–¥–∞–Ω–∏—è, –ø–æ–∫–∞–∑–∞—Ç—å?',
            reply_markup=keyboard
        )

    return OPEN_TASKS


@log_command(command=LOG_COMMANDS_NAME['ask_question'])
def ask_question(update: Update, context: CallbackContext):
    button = [
        [InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='open_menu')]
    ]
    keyboard = InlineKeyboardMarkup(button)
    update.callback_query.edit_message_text(
        text='–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å', reply_markup=keyboard
    )

    return AFTER_NEW_QUESTION


@log_command(command=LOG_COMMANDS_NAME['after_ask_question'])
def after_ask_question(update: Update, context: CallbackContext):
    buttons = [
        [
            InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è', callback_data='open_task')
        ],
        [
            InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data='open_menu')
        ]
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    update.callback_query.answer()
    update.callback_query.edit_message_text(
        text='–°–ø–∞—Å–∏–±–æ, —è —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–ª–ª–µ–≥–∞–º! '
             '–û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç –Ω–∞ —Ç–≤–æ—é –ø–æ—á—Ç—É <–ø–æ—á—Ç–∞ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞>',
        reply_markup=keyboard
    )

    return AFTER_CATEGORY_REPLY


@log_command(command=LOG_COMMANDS_NAME['no_relevant_category'])
def no_relevant_category(update: Update, context: CallbackContext):
    buttons = [
        [
            InlineKeyboardButton(
                text='–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏', callback_data='add_new_category'
            )
        ],
        [
            InlineKeyboardButton(
                text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è', callback_data='open_task'
            )
        ],
        [
            InlineKeyboardButton(
                text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='open_menu'
            )
        ]
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    update.callback_query.edit_message_text(
        text='–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –Ω–∞–º —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å? '
             '–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö üòâ',
        reply_markup=keyboard
    )

    return NO_CATEGORY


@log_command(command=LOG_COMMANDS_NAME['email_feedback'])
def email_feedback(update: Update, context: CallbackContext):
    button = [
        [
            InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='open_menu')
        ]
    ]
    keyboard = InlineKeyboardMarkup(button)
    update.callback_query.edit_message_text(
        text='–ë—É–¥–µ–º —Ä–∞–¥—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ '
             '–ø–æ—á—Ç–µ procharity@friends-foundation.com',
        reply_markup=keyboard
    )

    return MENU


@log_command(command=LOG_COMMANDS_NAME['add_new_category'])
def add_new_category(update: Update, context: CallbackContext):
    button = [
        [InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='open_menu')]
    ]
    keyboard = InlineKeyboardMarkup(button)
    update.callback_query.edit_message_text(
        text='–ù–∞–ø–∏—à–∏, –≤ –∫–∞–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä–µ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –ø–æ–º–æ–≥–∞—Ç—å?',
        reply_markup=keyboard
    )

    return AFTER_ADD_CATEGORY


@log_command(command=LOG_COMMANDS_NAME['after_add_new_category'])
def after_add_new_category(update: Update, context: CallbackContext):
    buttons = [
        [
            InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è', callback_data='open_task')
        ],
        [
            InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data='open_menu')
        ]
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    update.callback_query.edit_message_text(
        text='–°–ø–∞—Å–∏–±–æ, —è –ø–µ—Ä–µ–¥–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–µ ProCharity!'
             '–û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –Ω–∞ –ø–æ—á—Ç—É <email –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞>',
        reply_markup=keyboard
    )

    return AFTER_ADD_CATEGORY


@log_command(command=LOG_COMMANDS_NAME['add_new_feature'])
def add_new_feature(update: Update, context: CallbackContext):
    update.callback_query.answer()
    update.callback_query.edit_message_text(
        text='–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç?'
    )

    return TYPING


@log_command(command=LOG_COMMANDS_NAME['after_add_new_feature'])
def after_add_new_feature(update: Update, context: CallbackContext):
    buttons = [
        [
            InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è', callback_data='open_task')
        ],
        [
            InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data='open_menu')
        ]
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    update.callback_query.edit_message_text(
        text='–°–ø–∞—Å–∏–±–æ, —è —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–ª–ª–µ–≥–∞–º! '
             '–û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç –Ω–∞ —Ç–≤–æ—é –ø–æ—á—Ç—É <–ø–æ—á—Ç–∞ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞>',
        reply_markup=keyboard
    )

    return AFTER_ADD_FEATURE


@log_command(command=LOG_COMMANDS_NAME['about'])
def about(update: Update, context: CallbackContext):
    button = [
        [InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='open_menu')]
    ]
    keyboard = InlineKeyboardMarkup(button)
    update.callback_query.edit_message_text(
        text='–° ProCharity –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º '
             '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π –∏ '
             '–æ–ø—ã—Ç–∞.\n\n–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–æ–ª–æ–Ω—Ç—ë—Ä –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ –¥–∞—Ä–∏—Ç —Ñ–æ–Ω–¥—É —Å–≤–æ—ë '
             '–≤—Ä–µ–º—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, –ø–æ–∑–≤–æ–ª—è—è —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏, '
             '–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä—É–¥–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–∏–ª–∞–º–∏ —à—Ç–∞—Ç–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.',
        reply_markup=keyboard
    )

    return MENU


@log_command(command=LOG_COMMANDS_NAME['stop_task_subscription'])
def stop_task_subscription(update: Update, context: CallbackContext):
    context.user_data[SUBSCRIPTION_FLAG] = change_subscription(update.effective_user.id)
    cancel_feedback_buttons = [
        [
            InlineKeyboardButton(text=reason[1], callback_data=reason[0])
        ] for reason in REASONS.items()
    ]

    cancel_feedback_keyboard = InlineKeyboardMarkup(cancel_feedback_buttons)

    answer = ('–¢—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç —Ñ–æ–Ω–¥–æ–≤, –Ω–æ '
              '–≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∏—Ö –Ω–∞ —Å–∞–π—Ç–µ https://procharity.ru\n\n'
              '–ü–æ–¥–µ–ª–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—á–µ–º—É —Ç—ã —Ä–µ—à–∏–ª –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è?')

    update.callback_query.edit_message_text(
        text=answer, reply_markup=cancel_feedback_keyboard
    )

    return CANCEL_FEEDBACK


@log_command(command=LOG_COMMANDS_NAME['start_task_subscription'])
def start_task_subscription(update: Update, context: CallbackContext):
    context.user_data[SUBSCRIPTION_FLAG] = change_subscription(update.effective_user.id)

    button = [
        [
            InlineKeyboardButton(
                text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è', callback_data='open_task'
            )
        ],
        [
            InlineKeyboardButton(
                text='–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data='open_menu'
            )
        ]
    ]
    keyboard = InlineKeyboardMarkup(button)

    user_categories = [
        c['name'] for c in get_category(update.effective_user.id)
        if c['user_selected']
    ]

    answer = f'–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ ' \
             f'–Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –≤ ' \
             f'–∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: {", ".join(user_categories)}.\n\n' \
             f'–ê –ø–æ–∫–∞ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è.'

    update.callback_query.edit_message_text(text=answer,
                                            reply_markup=keyboard
                                            )

    return AFTER_CATEGORY_REPLY


def cancel_feedback(update: Update, context: CallbackContext):
    subscription_button = get_subscription_button(context)
    reason_canceling = update['callback_query']['data']
    telegram_id = update['callback_query']['message']['chat']['id']
    cancel_feedback_stat(telegram_id, reason_canceling)
    MENU_BUTTONS[-1] = [subscription_button]
    keyboard = InlineKeyboardMarkup(MENU_BUTTONS)
    update.callback_query.edit_message_text(
        text='–°–ø–∞—Å–∏–±–æ, —è –ø–µ—Ä–µ–¥–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–µ ProCharity!',
        reply_markup=keyboard
    )

    return MENU


# @log_command(command=LOG_COMMANDS_NAME['cancel'])
def cancel(update: Update, context: CallbackContext):
    user = update.message.from_user
    logger.info("User %s canceled the conversation.", user.first_name)
    update.message.reply_text(
        'Bye! I hope we can talk again some day.',
        reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END


def main() -> None:
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start)
        ],
        states={
            GREETING: [
                CallbackQueryHandler(choose_category_after_start, pattern='^' + GREETING + '$'),
                CallbackQueryHandler(before_confirm_specializations, pattern='^' + GREETING_REGISTERED_USER + '$')
            ],
            CATEGORY: [
                CallbackQueryHandler(choose_category, pattern='^return_chose_category$'),
                CallbackQueryHandler(after_category_choose, pattern='^ready$'),
                CallbackQueryHandler(no_relevant_category, pattern='^no_relevant$')

            ],
            AFTER_CATEGORY_REPLY: [
                CallbackQueryHandler(show_open_task, pattern='^open_task$'),
                CallbackQueryHandler(open_menu, pattern='^open_menu$')
            ],
            MENU: [
                CallbackQueryHandler(show_open_task, pattern='^open_task$'),
                CallbackQueryHandler(email_feedback, pattern='^ask_question$'),
                CallbackQueryHandler(about, pattern='^about$'),
                CallbackQueryHandler(choose_category, pattern='^change_category$'),
                CallbackQueryHandler(email_feedback, pattern='^new_feature$'),
                CallbackQueryHandler(stop_task_subscription, pattern='^stop_subscription$'),
                CallbackQueryHandler(start_task_subscription, pattern='^start_subscription$'),
                CallbackQueryHandler(open_menu, pattern='^open_menu$')
            ],
            OPEN_TASKS: [
                CallbackQueryHandler(show_open_task, pattern='^open_task$'),
                CallbackQueryHandler(open_menu, pattern='^open_menu$')
            ],
            NO_CATEGORY: [
                CallbackQueryHandler(email_feedback, pattern='^add_new_category$'),
                CallbackQueryHandler(show_open_task, pattern='^open_task$'),
                CallbackQueryHandler(open_menu, pattern='^open_menu$')
            ],
            AFTER_ADD_CATEGORY: [
                CallbackQueryHandler(open_menu, pattern='^open_menu$')
            ],
            AFTER_NEW_QUESTION: [
                CallbackQueryHandler(email_feedback, pattern='^open_menu$')
            ],
            AFTER_ADD_FEATURE: [
                CallbackQueryHandler(email_feedback, pattern='^open_menu$')
            ],
            CANCEL_FEEDBACK: [
                CallbackQueryHandler(cancel_feedback, pattern='^many_notification$'),
                CallbackQueryHandler(cancel_feedback, pattern='^no_time$'),
                CallbackQueryHandler(cancel_feedback, pattern='^no_relevant_task$'),
                CallbackQueryHandler(cancel_feedback, pattern='^bot_is_bad$'),
                CallbackQueryHandler(cancel_feedback, pattern='^fond_ignore'),
                CallbackQueryHandler(cancel_feedback, pattern='^another')
            ]
        },

        fallbacks=[
            CommandHandler('start', start),
            CommandHandler('menu', open_menu_fall)
        ],
        persistent=True,
        name='conv_handler'
    )
    dispatcher.add_handler(CommandHandler('cancel', cancel))

    update_users_category = CallbackQueryHandler(change_user_categories, pattern='^up_cat[0-9]{1,2}$')

    dispatcher.add_handler(conv_handler)
    dispatcher.add_handler(update_users_category)
    updater.start_polling()
