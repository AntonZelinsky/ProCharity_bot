from telegram import (Update,
                      InlineKeyboardMarkup,
                      InlineKeyboardButton,
                      ReplyKeyboardMarkup,
                      KeyboardButton)
from telegram.ext import CallbackContext

from telegram import InlineKeyboardButton
from bot import states
from bot.logger import log_command
from bot.constants import BOT_NAME, LOG_COMMANDS_NAME
from bot.user_db import UserDB

MENU_BUTTONS = [
    [
        KeyboardButton(
            text='üîé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è'
        )
    ],
    [
        KeyboardButton(
            text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏'
        )
    ],
    [
        KeyboardButton(
            text='‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–æ—à–∏–±–∫—É')
    ],
    [
        KeyboardButton(
            text='‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'
        )
    ],
    [
        KeyboardButton(
            text='‚ÑπÔ∏è –û –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ'
        )
    ],
    [
        KeyboardButton(
            text='‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏—è'
        )
    ]
]

user_db = UserDB()


@log_command(command=LOG_COMMANDS_NAME['start'])
def start(update: Update, context: CallbackContext) -> int:
    deeplink_passed_param = context.args
    user = user_db.add_user(update.effective_user, deeplink_passed_param)
    context.user_data[states.SUBSCRIPTION_FLAG] = user.has_mailing  
    reply_keyboard = [['–ù–∞—á–Ω–µ–º']]
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text='–ü—Ä–∏–≤–µ—Ç! üëã \n\n'
             f'–ú–µ–Ω—è –∑–æ–≤—É—Ç {BOT_NAME}. '
             '–ë—É–¥—É –¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –≤ –∫—É—Ä—Å–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∏ –ø–æ–º–æ–≥—É '
             '–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True,
        ),
    )
    
    return states.GREETING_REGISTERED_USER if user.categories else states.GREETING


@log_command(command=LOG_COMMANDS_NAME['open_menu'])
def open_menu(update: Update, context: CallbackContext):
    keyboard = get_full_menu_buttons(context)
    text = '–ú–µ–Ω—é'
    update.callback_query.answer()
    update.callback_query.edit_message_text(text=text, reply_markup=keyboard)

    return states.MENU


def open_menu_fall(update: Update, context: CallbackContext):
    keyboard = get_full_menu_buttons(context)
    text = '–ú–µ–Ω—é'
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=keyboard
    )
    return states.MENU


def get_full_menu_buttons(context: CallbackContext):
    subscription_button = get_subscription_button(context)
    MENU_BUTTONS[-1] = [subscription_button]
    keyboard = ReplyKeyboardMarkup(MENU_BUTTONS, resize_keyboard=True, one_time_keyboard=True)
    return keyboard


def get_subscription_button(context: CallbackContext):
    if context.user_data[states.SUBSCRIPTION_FLAG]:
        return KeyboardButton(
            text='‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏—è'
        )
    return KeyboardButton(
        text='‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏—è'
    )


def get_menu_and_tasks_buttons():
    buttons = [
        [
            KeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è', callback_data='open_task')
        ],
        [
            KeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data='open_menu')
        ]
    ]
    keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    return keyboard